// <auto-generated />
using System;
using Lab3SD.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab3SD.Migrations
{
    [DbContext(typeof(TablewareStoreDbContext))]
    [Migration("20231113204444_ChangeReviewsRatingsColumnName")]
    partial class ChangeReviewsRatingsColumnName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab3SD.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Lab3SD.Models.DiscountsPromotion", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("int")
                        .HasColumnName("discount_percentage");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("Discounts_Promotions");
                });

            modelBuilder.Entity("Lab3SD.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly?>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<int>("SellerUserId")
                        .HasColumnType("int")
                        .HasColumnName("seller_user_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalSum")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_sum");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Lab3SD.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .HasColumnType("int")
                        .HasColumnName("order_item_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order_Items");
                });

            modelBuilder.Entity("Lab3SD.Models.PaymentTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<DateOnly?>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment_Transactions");
                });

            modelBuilder.Entity("Lab3SD.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateOnly?>("DateWhenAdded")
                        .HasColumnType("date")
                        .HasColumnName("date_when_added");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<int?>("QuantityInStock")
                        .HasColumnType("int")
                        .HasColumnName("quantity_in_stock");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.HasKey("ProductId")
                        .HasName("Products_pk");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Lab3SD.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("CategoryId")
                        .HasName("Product_Categories_pk");

                    b.ToTable("Product_Categories");
                });

            modelBuilder.Entity("Lab3SD.Models.ReviewsRating", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateOnly?>("DateWhenPosted")
                        .HasColumnType("date")
                        .HasColumnName("date_when_posted");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("ReviewId")
                        .HasName("Reviews_Ratings_pk");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews_Ratings");
                });

            modelBuilder.Entity("Lab3SD.Models.ShippingInformation", b =>
                {
                    b.Property<int>("ShippingId")
                        .HasColumnType("int")
                        .HasColumnName("shipping_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text")
                        .HasColumnName("shipping_address");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shipping_method");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tracking_number");

                    b.HasKey("ShippingId")
                        .HasName("Shipping_Information_pk");

                    b.HasIndex("OrderId");

                    b.ToTable("Shipping_Information");
                });

            modelBuilder.Entity("Lab3SD.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("text")
                        .HasColumnName("contact_info");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("SupplierId")
                        .HasName("Suppliers_pk");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Lab3SD.Models.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("User_Accounts_pk");

                    b.HasIndex("RoleId");

                    b.ToTable("User_Accounts");
                });

            modelBuilder.Entity("Lab3SD.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Role")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("role");

                    b.HasKey("RoleId")
                        .HasName("User_Roles_pk");

                    b.ToTable("User_Roles");
                });

            modelBuilder.Entity("Lab3SD.Models.Customer", b =>
                {
                    b.HasOne("Lab3SD.Models.UserAccount", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Customers_User_Accounts_user_id_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lab3SD.Models.DiscountsPromotion", b =>
                {
                    b.HasOne("Lab3SD.Models.Product", "Product")
                        .WithMany("DiscountsPromotions")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Discounts_Promotions_Products_product_id_fk");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lab3SD.Models.Order", b =>
                {
                    b.HasOne("Lab3SD.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("Orders_Customers_customer_id_fk");

                    b.HasOne("Lab3SD.Models.UserAccount", "SellerUser")
                        .WithMany("Orders")
                        .HasForeignKey("SellerUserId")
                        .IsRequired()
                        .HasConstraintName("Orders_User_Accounts_user_id_fk");

                    b.Navigation("Customer");

                    b.Navigation("SellerUser");
                });

            modelBuilder.Entity("Lab3SD.Models.OrderItem", b =>
                {
                    b.HasOne("Lab3SD.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("Order_Items_Orders_order_id_fk");

                    b.HasOne("Lab3SD.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Order_Items_Products_product_id_fk");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lab3SD.Models.PaymentTransaction", b =>
                {
                    b.HasOne("Lab3SD.Models.Order", "Order")
                        .WithMany("PaymentTransactions")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("Payment_Transactions_Orders_order_id_fk");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lab3SD.Models.Product", b =>
                {
                    b.HasOne("Lab3SD.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Products_Product_Categories_category_id_fk");

                    b.HasOne("Lab3SD.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("Products_Suppliers_supplier_id_fk");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Lab3SD.Models.ReviewsRating", b =>
                {
                    b.HasOne("Lab3SD.Models.Customer", "Customer")
                        .WithMany("ReviewsRatings")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("Reviews_Ratings_Customers_customer_id_fk");

                    b.HasOne("Lab3SD.Models.Product", "Product")
                        .WithMany("ReviewsRatings")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("Reviews_Ratings_Products_product_id_fk");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lab3SD.Models.ShippingInformation", b =>
                {
                    b.HasOne("Lab3SD.Models.Order", "Order")
                        .WithMany("ShippingInformations")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("Shipping_Information_Orders_order_id_fk");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Lab3SD.Models.UserAccount", b =>
                {
                    b.HasOne("Lab3SD.Models.UserRole", "Role")
                        .WithMany("UserAccounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("User_Accounts_User_Roles_role_id_fk");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Lab3SD.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ReviewsRatings");
                });

            modelBuilder.Entity("Lab3SD.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("PaymentTransactions");

                    b.Navigation("ShippingInformations");
                });

            modelBuilder.Entity("Lab3SD.Models.Product", b =>
                {
                    b.Navigation("DiscountsPromotions");

                    b.Navigation("OrderItems");

                    b.Navigation("ReviewsRatings");
                });

            modelBuilder.Entity("Lab3SD.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lab3SD.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lab3SD.Models.UserAccount", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Lab3SD.Models.UserRole", b =>
                {
                    b.Navigation("UserAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
